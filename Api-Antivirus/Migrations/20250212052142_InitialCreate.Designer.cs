// <auto-generated />
using Api_Antivirus.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api_Antivirus.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250212052142_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("bootcamp", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("costs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("information")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("institution_id")
                        .HasColumnType("integer");

                    b.Property<int>("institutionid")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("institutionid");

                    b.ToTable("bootcamps");
                });

            modelBuilder.Entity("bootcamp_topic", b =>
                {
                    b.Property<int>("bootcamp_id")
                        .HasColumnType("integer");

                    b.Property<int>("topic_id")
                        .HasColumnType("integer");

                    b.Property<int>("bootcampid")
                        .HasColumnType("integer");

                    b.Property<int>("topicid")
                        .HasColumnType("integer");

                    b.HasKey("bootcamp_id", "topic_id");

                    b.HasIndex("bootcampid");

                    b.HasIndex("topicid");

                    b.ToTable("bootcamp_topics");
                });

            modelBuilder.Entity("category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("institution", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("url_academic_offers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("url_admission")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("url_general")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("url_wellbeing")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("institutions");
                });

            modelBuilder.Entity("institution_bootcamp", b =>
                {
                    b.Property<int>("institution_id")
                        .HasColumnType("integer");

                    b.Property<int>("bootcamp_id")
                        .HasColumnType("integer");

                    b.Property<int>("bootcampid")
                        .HasColumnType("integer");

                    b.Property<int>("institutionid")
                        .HasColumnType("integer");

                    b.HasKey("institution_id", "bootcamp_id");

                    b.HasIndex("bootcampid");

                    b.HasIndex("institutionid");

                    b.ToTable("institution_bootcamps");
                });

            modelBuilder.Entity("opportunity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("additional_data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("category_id")
                        .HasColumnType("integer");

                    b.Property<int>("categoryid")
                        .HasColumnType("integer");

                    b.Property<string>("contact_channels")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("guide")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("institution_id")
                        .HasColumnType("integer");

                    b.Property<int>("institutionid")
                        .HasColumnType("integer");

                    b.Property<string>("manager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("modality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("observations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("requirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("categoryid");

                    b.HasIndex("institutionid");

                    b.ToTable("opportunities");
                });

            modelBuilder.Entity("opportunity_institution", b =>
                {
                    b.Property<int>("opportunity_id")
                        .HasColumnType("integer");

                    b.Property<int>("institution_id")
                        .HasColumnType("integer");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<int>("institutionid")
                        .HasColumnType("integer");

                    b.Property<int>("opportunityid")
                        .HasColumnType("integer");

                    b.HasKey("opportunity_id", "institution_id");

                    b.HasIndex("institutionid");

                    b.HasIndex("opportunityid");

                    b.ToTable("opportunity_institutions");
                });

            modelBuilder.Entity("topic", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("topics");
                });

            modelBuilder.Entity("user", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("user_opportunity", b =>
                {
                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.Property<int>("opportunity_id")
                        .HasColumnType("integer");

                    b.Property<int>("opportunityid")
                        .HasColumnType("integer");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.HasKey("user_id", "opportunity_id");

                    b.HasIndex("opportunityid");

                    b.HasIndex("userid");

                    b.ToTable("user_opportunities");
                });

            modelBuilder.Entity("bootcamp", b =>
                {
                    b.HasOne("institution", "institution")
                        .WithMany()
                        .HasForeignKey("institutionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("institution");
                });

            modelBuilder.Entity("bootcamp_topic", b =>
                {
                    b.HasOne("bootcamp", "bootcamp")
                        .WithMany()
                        .HasForeignKey("bootcampid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("topic", "topic")
                        .WithMany()
                        .HasForeignKey("topicid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bootcamp");

                    b.Navigation("topic");
                });

            modelBuilder.Entity("institution_bootcamp", b =>
                {
                    b.HasOne("bootcamp", "bootcamp")
                        .WithMany()
                        .HasForeignKey("bootcampid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("institution", "institution")
                        .WithMany()
                        .HasForeignKey("institutionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bootcamp");

                    b.Navigation("institution");
                });

            modelBuilder.Entity("opportunity", b =>
                {
                    b.HasOne("category", "category")
                        .WithMany()
                        .HasForeignKey("categoryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("institution", "institution")
                        .WithMany()
                        .HasForeignKey("institutionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("institution");
                });

            modelBuilder.Entity("opportunity_institution", b =>
                {
                    b.HasOne("institution", "institution")
                        .WithMany()
                        .HasForeignKey("institutionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("opportunity", "opportunity")
                        .WithMany()
                        .HasForeignKey("opportunityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("institution");

                    b.Navigation("opportunity");
                });

            modelBuilder.Entity("user_opportunity", b =>
                {
                    b.HasOne("opportunity", "opportunity")
                        .WithMany()
                        .HasForeignKey("opportunityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("user", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("opportunity");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
